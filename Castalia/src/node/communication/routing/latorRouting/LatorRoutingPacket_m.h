//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/latorRouting/LatorRoutingPacket.msg.
//

#ifndef _LATORROUTINGPACKET_M_H_
#define _LATORROUTINGPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "PacketId_m.h"
// }}

/**
 * Class generated from <tt>src/node/communication/routing/latorRouting/LatorRoutingPacket.msg:27</tt> by nedtool.
 * <pre>
 * //id =1
 * packet LatorRREQPacket extends PacketId
 * {
 *     bool flagJ;
 *     bool flagR;
 *     bool flagG;
 *     bool flagD;
 *     bool flagU;
 *     int hopCount;
 *     int rreqID;
 *     string sourceLator;
 *     unsigned long sourceSeqNum;
 *     unsigned long destinationSeqNum;
 *     string destinationLator;
 * }
 * </pre>
 */
class LatorRREQPacket : public ::PacketId
{
  protected:
    bool flagJ_var;
    bool flagR_var;
    bool flagG_var;
    bool flagD_var;
    bool flagU_var;
    int hopCount_var;
    int rreqID_var;
    opp_string sourceLator_var;
    unsigned long sourceSeqNum_var;
    unsigned long destinationSeqNum_var;
    opp_string destinationLator_var;

  private:
    void copy(const LatorRREQPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LatorRREQPacket&);

  public:
    LatorRREQPacket(const char *name=NULL, int kind=0);
    LatorRREQPacket(const LatorRREQPacket& other);
    virtual ~LatorRREQPacket();
    LatorRREQPacket& operator=(const LatorRREQPacket& other);
    virtual LatorRREQPacket *dup() const {return new LatorRREQPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool getFlagJ() const;
    virtual void setFlagJ(bool flagJ);
    virtual bool getFlagR() const;
    virtual void setFlagR(bool flagR);
    virtual bool getFlagG() const;
    virtual void setFlagG(bool flagG);
    virtual bool getFlagD() const;
    virtual void setFlagD(bool flagD);
    virtual bool getFlagU() const;
    virtual void setFlagU(bool flagU);
    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);
    virtual int getRreqID() const;
    virtual void setRreqID(int rreqID);
    virtual const char * getSourceLator() const;
    virtual void setSourceLator(const char * sourceLator);
    virtual unsigned long getSourceSeqNum() const;
    virtual void setSourceSeqNum(unsigned long sourceSeqNum);
    virtual unsigned long getDestinationSeqNum() const;
    virtual void setDestinationSeqNum(unsigned long destinationSeqNum);
    virtual const char * getDestinationLator() const;
    virtual void setDestinationLator(const char * destinationLator);
};

inline void doPacking(cCommBuffer *b, LatorRREQPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, LatorRREQPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/node/communication/routing/latorRouting/LatorRoutingPacket.msg:42</tt> by nedtool.
 * <pre>
 * //id =5
 * packet LatorHelloMessage extends PacketId
 * {
 *     double energyOfNode;
 * 	// double temperatureOfNode;
 * }
 * </pre>
 */
class LatorHelloMessage : public ::PacketId
{
  protected:
    double energyOfNode_var;

  private:
    void copy(const LatorHelloMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LatorHelloMessage&);

  public:
    LatorHelloMessage(const char *name=NULL, int kind=0);
    LatorHelloMessage(const LatorHelloMessage& other);
    virtual ~LatorHelloMessage();
    LatorHelloMessage& operator=(const LatorHelloMessage& other);
    virtual LatorHelloMessage *dup() const {return new LatorHelloMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual double getEnergyOfNode() const;
    virtual void setEnergyOfNode(double energyOfNode);
};

inline void doPacking(cCommBuffer *b, LatorHelloMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, LatorHelloMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/node/communication/routing/latorRouting/LatorRoutingPacket.msg:48</tt> by nedtool.
 * <pre>
 * //id =4
 * packet LatorRREPAckPacket extends PacketId
 * {
 * }
 * </pre>
 */
class LatorRREPAckPacket : public ::PacketId
{
  protected:

  private:
    void copy(const LatorRREPAckPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LatorRREPAckPacket&);

  public:
    LatorRREPAckPacket(const char *name=NULL, int kind=0);
    LatorRREPAckPacket(const LatorRREPAckPacket& other);
    virtual ~LatorRREPAckPacket();
    LatorRREPAckPacket& operator=(const LatorRREPAckPacket& other);
    virtual LatorRREPAckPacket *dup() const {return new LatorRREPAckPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, LatorRREPAckPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, LatorRREPAckPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/node/communication/routing/latorRouting/LatorRoutingPacket.msg:53</tt> by nedtool.
 * <pre>
 * //id =3
 * packet LatorRERRPacket extends PacketId
 * {
 *     bool flagN;
 *     int destCount;
 *     string unreachableDestAddr[];
 *     unsigned long unreachableDestSeqNum[];
 * }
 * </pre>
 */
class LatorRERRPacket : public ::PacketId
{
  protected:
    bool flagN_var;
    int destCount_var;
    opp_string *unreachableDestAddr_var; // array ptr
    unsigned int unreachableDestAddr_arraysize;
    unsigned long *unreachableDestSeqNum_var; // array ptr
    unsigned int unreachableDestSeqNum_arraysize;

  private:
    void copy(const LatorRERRPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LatorRERRPacket&);

  public:
    LatorRERRPacket(const char *name=NULL, int kind=0);
    LatorRERRPacket(const LatorRERRPacket& other);
    virtual ~LatorRERRPacket();
    LatorRERRPacket& operator=(const LatorRERRPacket& other);
    virtual LatorRERRPacket *dup() const {return new LatorRERRPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool getFlagN() const;
    virtual void setFlagN(bool flagN);
    virtual int getDestCount() const;
    virtual void setDestCount(int destCount);
    virtual void setUnreachableDestAddrArraySize(unsigned int size);
    virtual unsigned int getUnreachableDestAddrArraySize() const;
    virtual const char * getUnreachableDestAddr(unsigned int k) const;
    virtual void setUnreachableDestAddr(unsigned int k, const char * unreachableDestAddr);
    virtual void setUnreachableDestSeqNumArraySize(unsigned int size);
    virtual unsigned int getUnreachableDestSeqNumArraySize() const;
    virtual unsigned long getUnreachableDestSeqNum(unsigned int k) const;
    virtual void setUnreachableDestSeqNum(unsigned int k, unsigned long unreachableDestSeqNum);
};

inline void doPacking(cCommBuffer *b, LatorRERRPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, LatorRERRPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _LATORROUTINGPACKET_M_H_

